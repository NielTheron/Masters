function h = HFunction(xm, c_eci)
%==========================================================================
% Niel Theron - Complete Transformation Chain
%==========================================================================
% Measurement model: ECI → LVLH (Orbital) → Body transformation
% 
% Inputs:
% xm    - State vector [r_ECI(3), v_ECI(3), q_body_to_inertial(4), w_body(3)]
% c_eci - Feature position in ECI frame [3x1] (km)
%
% Output:
% h     - Expected measurement in body/camera frame [3x1] (km)
%
% Transformation Chain: ECI → LVLH → BOD
%==========================================================================

%==========================================================================
% Step 1: Transform from ECI to LVLH (Orbital Frame)
%==========================================================================

% Extract satellite position and velocity in ECI
r_sat_eci = [xm(1) xm(2) xm(3)].';

% Transform feature from ECI to LVLH frame
f_eci_relative = c_eci - r_sat_eci;              % Feature relative to satellite in ECI

%==========================================================================
% Step 2: Transform from Inertial to Body Frame
%==========================================================================

% Extract quaternion (Body to Inertial)
q = quatnormalize(xm(7:10).');
qs = q(1); qx = q(2); qy = q(3); qz = q(4);

% Create rotation matrix from Body to Inertial (ECI)
R_body_to_eci = [1 - 2*(qy^2 + qz^2),  2*(qx*qy - qs*qz),  2*(qx*qz + qs*qy);
                 2*(qx*qy + qs*qz),  1 - 2*(qx^2 + qz^2),  2*(qy*qz - qs*qx);
                 2*(qx*qz - qs*qy),  2*(qy*qz + qs*qx),  1 - 2*(qx^2 + qy^2)];

h = 

end